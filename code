from random import (randint)
from typing import (List, Tuple, Set, Dict, Any)
import random
import pandas as pd
from utils import *
from collections import namedtuple
from reshape_data import *
import numpy as np
import math
MATRIX_SIZE = 500


# 个体对象，染色体和适应度
class Gene(object):
    def __init__(self, fitness: float = 0, chromosome=None):
        self.fitness = fitness
        self.chromosome: list = chromosome

    def __eq__(self, other):
        if isinstance(other, Gene):
            return other.fitness == self.fitness and other.chromosome == self.chromosome
        return False

    def __hash__(self):
        return hash("".join(map(lambda x: str(x), self.chromosome)))

    def __str__(self):
        return "{} => {}".format(self.chromosome, self.fitness)


# 存储解码结果
class GeneEvaluation:
    def __init__(self):
        self.fulfill_time = 0
        self.machine_work_time = [0 for _ in range(MATRIX_SIZE)]
        self.process_ids = [0 for _ in range(MATRIX_SIZE)]
        self.end_time = [[0 for _ in range(MATRIX_SIZE)] for _ in range(MATRIX_SIZE)]
        self.start_time = [[0 for _ in range(MATRIX_SIZE)] for _ in range(MATRIX_SIZE)]


# 关联工序 500，100  1211 一般超过60
# 测试    100  500  1190
#       100  100  1207
# 比赛数据       100  100   1133
# 遗传算法实现
class GA:
    def __init__(self, population_number=100, times=100, cross_probability=0.90,
                 mutation_probability=0.1, workpiece_number=0, machine_number=0):
        self.population_number = population_number  # 种群数量
        self.times = times  # 遗传代数
        self.cross_probability = cross_probability  # 交叉概率
        self.mutation_probability = mutation_probability  # 突变概率

        self.workpiece_number = workpiece_number  # 工件数量
        self.machine_number = machine_number  # 机器数量
        self.process_number: int = 0  # 工序数量
        self.chromosome_size: int = 0  # 染色体长度

        self.machine_matrix = [[-1 for _ in range(MATRIX_SIZE)] for _ in range(MATRIX_SIZE)]
        self.time_matrix = [[-1 for _ in range(MATRIX_SIZE)] for _ in range(MATRIX_SIZE)]
        self.process_matrix = [[-1 for _ in range(MATRIX_SIZE)] for _ in range(MATRIX_SIZE)]

        self.genes: Set[Gene] = set()

    # 评估染色体
    def evaluate_gene(self, g: Gene) -> GeneEvaluation:
        evaluation = GeneEvaluation()

        for workpiece_id in g.chromosome:
            process_id = evaluation.process_ids[workpiece_id]
            machine_id = self.machine_matrix[workpiece_id][process_id]
            time = self.time_matrix[workpiece_id][process_id]
            evaluation.process_ids[workpiece_id] += 1
            evaluation.start_time[workpiece_id][process_id] = evaluation.machine_work_time[machine_id] \
                if process_id == 0 else max(evaluation.end_time[workpiece_id][process_id - 1],
                                            evaluation.machine_work_time[machine_id])
            evaluation.machine_work_time[machine_id] = evaluation.start_time[workpiece_id][process_id] + time
            evaluation.end_time[workpiece_id][process_id] = evaluation.machine_work_time[machine_id]
            evaluation.fulfill_time = max(evaluation.fulfill_time, evaluation.machine_work_time[machine_id])

        return evaluation

    def calculate_fitness(self, g: Gene) -> float:

        return 1/self.evaluate_gene(g).fulfill_time

    # 个体交叉
    def gene_cross(self, g1: Gene, g2: Gene) -> tuple:
        chromosome_size = self.chromosome_size

        def gene_generate(father: Gene, mother: Gene) -> Gene:

            index_list = list(range(chromosome_size))
            p1 = index_list.pop(randint(0, len(index_list) - 1))
            p2 = index_list.pop(randint(0, len(index_list) - 1))
            start = min(p1, p2)
            end = max(p1, p2)
            prototype = father.chromosome[start: end + 1]
            t = mother.chromosome[0:]
            for v1 in prototype:
                for i in range(len(t)):
                    if v1 == t[i]:
                        t.pop(i)
                        break
            child = Gene()
            child.chromosome = t[0: start] + prototype + t[start:]
            #print(child.chromosome)
            child.fitness = self.calculate_fitness(child)
            #print(child.fitness)
            return child

        return gene_generate(g1, g2), gene_generate(g2, g1)

    # 突变
    def gene_mutation(self, g: Gene, n=2) -> None:
        index_list = [i for i in range(self.chromosome_size)]
        for i in range(n):
            a = index_list.pop(randint(0, len(index_list) - 1))
            b = index_list.pop(randint(0, len(index_list) - 1))
            g.chromosome[a], g.chromosome[b] = g.chromosome[b], g.chromosome[a]

        g.fitness = self.calculate_fitness(g)
        #print(g.fitness)
    # 初始化种群
    def init_population(self):

        for _ in range(self.population_number):
            g = Gene()
            size = self.workpiece_number * self.machine_number
            # print(self.workpiece_number, self.machine_number)
            index_list = list(range(size))
            chromosome = [-1 for _ in range(size)]
            for j in range(self.workpiece_number):
                for k in range(self.machine_number):
                    index = randint(0, len(index_list) - 1)
                    val = index_list.pop(index)
                    if self.process_matrix[j][k] != -1:
                        chromosome[val] = j
            g.chromosome = list(filter(lambda x: x != -1, chromosome))

            g.fitness = self.calculate_fitness(g)
            #print(g)
            #print(type(g))
            self.genes.add(g)
        #设置适应度的计算
        '''list1=[]
        for g in self.genes:
            #print(g.fitness)
            list1.append(1/g.fitness)

        for g in self.genes:
            g.fitness=(1/g.fitness-min(list1))/(max(list1)-min(list1))'''

    # 选择个体，锦标赛法
    def select_gene(self, n: int = 3):

        if len(self.genes) <= 3:
            best_gene = Gene(0)

            for g in self.genes:
                if g.fitness > best_gene.fitness:
                    best_gene = g
            return best_gene

        index_list = list(range(len(self.genes)))
        index_set = {index_list.pop(randint(0, len(index_list) - 1)) for _ in range(n)}
        best_gene = Gene(0)
        i = 0
        for gene in self.genes:
            if i in index_set:
                if best_gene.fitness < gene.fitness:
                    best_gene = gene
            i += 1
        return best_gene

    # 遗传算法
    def exec(self, parameter: List[List[Tuple]]) -> GeneEvaluation:
        workpiece_size = len(parameter)
        for i in range(workpiece_size):
            self.chromosome_size += len(parameter[i])
            self.process_number = max(self.process_number, len(parameter[i]))
            for j in range(len(parameter[i])):
                self.machine_matrix[i][j] = parameter[i][j][0]
                self.time_matrix[i][j] = parameter[i][j][1]

        for i in range(workpiece_size):
            for j in range(self.process_number):
                if self.machine_matrix[i][j] != -1:
                    self.process_matrix[i][self.machine_matrix[i][j]] = j

        self.init_population()

        for _ in range(self.times):
            probability = randint(1, 100) / 100
            if probability < self.mutation_probability:
                index = randint(0, len(self.genes))
                i = 0
                for gene in self.genes:

                    if i == index:
                        self.gene_mutation(gene)
                        break
                    i += 1
            else:
                g1, g2 = self.select_gene(), self.select_gene()

                children = self.gene_cross(g1, g2)

                self.genes.update({*children})


            O=0
            L=200
            Tk=2000
            best_gene = Gene(0)
            for gene in self.genes:
                if best_gene.fitness < gene.fitness:
                    best_gene = gene
            while O!=self.population_number:
                s_optimal=best_gene
                list_gene_all = [gene for gene in self.genes]  # 各个算子状态合集
                S_list = []
                d=1
                i=0
                while d<=L:
                    s_random = random.choice(list_gene_all)
                    dE=s_random.fitness-s_optimal.fitness
                    if dE>=0:
                        s_optimal=s_random
                    else:
                        if random.random()<math.exp(-dE/Tk):
                            s_optimal=s_random
                    s_optimal_two=s_optimal
                    s_optimal_two.chromosome[i:i+2],s_optimal_two.chromosome[-(3+i):-(1+i)]=s_optimal_two.chromosome[-(3+i):-(1+i)],s_optimal_two.chromosome[i:i+2]
                    if i<=15:
                        i += 1
                    else:
                        i=0
                    if s_optimal_two.fitness>= s_random.fitness:
                        s_optimal=s_optimal_two
                    else:
                        s_optimal=s_random
                    d=d+1

                    S_list.append(s_optimal)
                best_gene = Gene(0)
                for gene in S_list:
                    if best_gene.fitness < gene.fitness:
                        best_gene = gene

                self.genes.add(best_gene)

                O=O+1
                Tk1 = 0.99 * Tk
                dT = Tk - Tk1
                if dT>10:
                    Tk1=Tk1+0.5*dT
                Tk=Tk1

            #print(self.genes)

        #精英法则选择最优
        best_gene = Gene(0)
        for gene in self.genes:
            if best_gene.fitness < gene.fitness:
                best_gene = gene

        return self.evaluate_gene(best_gene)


ResultData = namedtuple("ResultData", ["fulfill_time", "row_data", "json_data"])


# 输出结果
def schedule(data) -> ResultData:
    reshape = reshape_data(data)
    parameter = reshape.result
    n = len(reshape.workpiece)
    m = len(reshape.machine)  # number from 0
    ga = GA(workpiece_number=n, machine_number=m)
    result = ga.exec(parameter)
    p = ga.process_number
    machine_matrix = ga.machine_matrix
    row_data = []
    for i in range(n):
        for j in range(p):
            if machine_matrix[i][j] != -1:
                temp = {
                    "workpiece": reshape.workpiece[i],
                    "process": reshape.process[i][j],
                    "machine": reshape.machine[machine_matrix[i][j]],
                    "startTime": result.start_time[i][j],
                    "endTime": result.end_time[i][j]
                }
                row_data.append(temp)

    json_data = {}
    for i in range(n):
        for j in range(p):
            if machine_matrix[i][j] != -1:
                temp = {
                    "workpiece": reshape.workpiece[i],
                    "process": reshape.process[i][j],
                    "startTime": result.start_time[i][j],
                    "endTime": result.end_time[i][j]
                }
                m = reshape.machine[machine_matrix[i][j]]
                if m not in json_data:
                    json_data[m] = [temp]
                else:
                    json_data[m].append(temp)
    return ResultData(result.fulfill_time, row_data, json_data)


if __name__ == "__main__":
    # 测试数据
    '''
    e=[]
    data = np.loadtxt('data.txt', dtype=np.int32,skiprows=1)
    for i in range(len(data)):  #i表示工件
        for j in range(len(data)): #j表示工序
            data_temp = {
                "workpiece":f'{i}',
                "process": f'{j}',
                'machine': f'{data[i][3*j+2]}',
                "time": data[i][3*j+3],
                "order": j
            }
            e.append(data_temp)
    #目前2w次迭代，最优52
    a=[]
    for i in range(20):
        a.append(schedule(e).fulfill_time)
    print(a)
    print(sum(a))

    '''

    e = []
    data = np.loadtxt('data2.txt', dtype=np.int32, skiprows=1)
    for i in range(len(data)):  # i表示工件
        for j in range(len(data)):  # j表示工序
            data_temp = {
                "workpiece": f'{i}',
                "process": f'{j}',
                'machine': f'{data[i][2 * j]}',
                "time": data[i][2 * j + 1],
                "order": j
            }
            e.append(data_temp)

    a = []
    for i in range(20):
        a.append(schedule(e).fulfill_time)
    print(a)
    print(sum(a))
    #schedule(e).fulfill_time

